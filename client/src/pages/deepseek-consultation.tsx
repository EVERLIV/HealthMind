import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useLocation } from "wouter";
import MobileNav from "@/components/layout/mobile-nav";
import BottomNav from "@/components/layout/bottom-nav";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { apiRequest, queryClient } from "@/lib/queryClient";
import {
  Stethoscope,
  MessageCircle,
  Brain,
  ArrowLeft,
  Send,
  Loader2,
  Sparkles,
  Heart,
  Activity,
  TestTube,
  User,
  Lightbulb,
  FileText,
  CheckCircle2,
  AlertCircle,
  TrendingUp,
  Target
} from "lucide-react";

interface ConsultationResponse {
  analysis: string;
  recommendations: string[];
  priority: "high" | "medium" | "low";
  followUp: string[];
  disclaimer: string;
}

export default function AIConsultation() {
  const [, navigate] = useLocation();
  const [question, setQuestion] = useState("");
  const [consultationHistory, setConsultationHistory] = useState<Array<{
    question: string;
    response: ConsultationResponse;
    timestamp: Date;
  }>>([]);
  const [expandedGoals, setExpandedGoals] = useState<Set<number>>(new Set());
  const { toast } = useToast();

  const { data: healthProfile } = useQuery({
    queryKey: ["/api/health-profile"],
  });

  const { data: bloodAnalyses } = useQuery({
    queryKey: ["/api/blood-analyses"],
  });

  const hasProfile = !!(healthProfile && ((healthProfile as any)?.profileData || (healthProfile as any)?.completionPercentage > 0));
  const hasAnalyses = !!(bloodAnalyses && Array.isArray(bloodAnalyses) && bloodAnalyses.length > 0);

  const consultationMutation = useMutation({
    mutationFn: async (consultationData: { question: string; healthProfile?: any; bloodAnalyses?: any }) => {
      const response = await apiRequest("/api/ai-consultation", {
        method: "POST",
        body: JSON.stringify(consultationData)
      });
      return response as ConsultationResponse;
    },
    onSuccess: (data, variables) => {
      const newConsultation = {
        question: variables.question,
        response: data,
        timestamp: new Date()
      };
      setConsultationHistory(prev => [newConsultation, ...prev]);
      setQuestion("");
      toast({
        title: "‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!",
        description: "–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å",
        className: "bg-gradient-to-r from-medical-blue to-trust-green text-white border-0",
      });
    },
    onError: () => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
        variant: "destructive",
      });
    },
  });

  const handleSubmitQuestion = () => {
    if (!question.trim()) return;

    consultationMutation.mutate({
      question: question.trim(),
      healthProfile: healthProfile,
      bloodAnalyses: bloodAnalyses
    });
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "high": return "bg-red-100 text-red-700 border-red-200";
      case "medium": return "bg-orange-100 text-orange-700 border-orange-200";
      case "low": return "bg-green-100 text-green-700 border-green-200";
      default: return "bg-gray-100 text-gray-700 border-gray-200";
    }
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case "high": return <AlertCircle className="w-4 h-4" />;
      case "medium": return <TrendingUp className="w-4 h-4" />;
      case "low": return <CheckCircle2 className="w-4 h-4" />;
      default: return <Lightbulb className="w-4 h-4" />;
    }
  };

  const quickQuestions = [
    "–ê–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏: —á—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?",
    "–ö–∞–∫ —Å–Ω–∏–∑–∏—Ç—å —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω?",
    "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
    "–ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–¥—Ü–∞: –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞"
  ];

  // –¶–µ–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è –∏ –∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const healthGoalRecommendations = {
    "weight_loss": {
      title: "–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞",
      icon: "üéØ",
      recommendations: [
        "–°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π 300-500 –∫–∫–∞–ª –≤ –¥–µ–Ω—å",
        "–î–æ–±–∞–≤—å—Ç–µ 30 –º–∏–Ω—É—Ç –∫–∞—Ä–¥–∏–æ 4-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
        "–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞ –¥–æ 1.6-2.2 –≥/–∫–≥ –≤–µ—Å–∞",
        "–ü–µ–π—Ç–µ 2-3 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ",
        "–í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è"
      ]
    },
    "muscle_gain": {
      title: "–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã",
      icon: "üí™",
      recommendations: [
        "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é",
        "–ü–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ 2.0-2.5 –≥ –±–µ–ª–∫–∞ –Ω–∞ –∫–≥ –≤–µ—Å–∞",
        "–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π 300-500 –∫–∫–∞–ª",
        "–°–ø–∏—Ç–µ 7-9 —á–∞—Å–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
        "–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –Ω–∞–≥—Ä—É–∑–∫–∏"
      ]
    },
    "improve_fitness": {
      title: "–£–ª—É—á—à–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã",
      icon: "üèÉ",
      recommendations: [
        "–ù–∞—á–Ω–∏—Ç–µ —Å 150 –º–∏–Ω—É—Ç —É–º–µ—Ä–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–¥–µ–ª—é",
        "–ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ –∫–∞—Ä–¥–∏–æ –∏ —Å–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
        "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å",
        "–î–æ–±–∞–≤—å—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –≥–∏–±–∫–æ—Å—Ç—å",
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø—É–ª—å—Å"
      ]
    },
    "reduce_stress": {
      title: "–°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞",
      icon: "üßò",
      recommendations: [
        "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –º–µ–¥–∏—Ç–∞—Ü–∏—é 10-15 –º–∏–Ω—É—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ",
        "–ò–∑—É—á–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –¥—ã—Ö–∞–Ω–∏—è",
        "–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –≤—Ä–µ–º—è –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö",
        "–†–µ–≥—É–ª—è—Ä–Ω–æ –±—ã–≤–∞–π—Ç–µ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ",
        "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ö–æ–±–±–∏ –∏ –æ—Ç–¥—ã—Ö–∞"
      ]
    },
    "better_sleep": {
      title: "–£–ª—É—á—à–µ–Ω–∏–µ —Å–Ω–∞",
      icon: "üò¥",
      recommendations: [
        "–õ–æ–∂–∏—Ç–µ—Å—å —Å–ø–∞—Ç—å –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è",
        "–ò–∑–±–µ–≥–∞–π—Ç–µ –∫–æ—Ñ–µ–∏–Ω–∞ –ø–æ—Å–ª–µ 16:00",
        "–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ö–ª–∞–¥–Ω—É—é —Ç–µ–º–Ω—É—é —Å–ø–∞–ª—å–Ω—é",
        "–û—Ç–∫–∞–∂–∏—Ç–µ—Å—å –æ—Ç —ç–∫—Ä–∞–Ω–æ–≤ –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞",
        "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–µ —Ä–∏—Ç—É–∞–ª—ã"
      ]
    },
    "healthy_eating": {
      title: "–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
      icon: "ü•ó",
      recommendations: [
        "–í–∫–ª—é—á–∏—Ç–µ 5-7 –ø–æ—Ä—Ü–∏–π –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤ –≤ –¥–µ–Ω—å",
        "–í—ã–±–∏—Ä–∞–π—Ç–µ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
        "–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
        "–ì–æ—Ç–æ–≤—å—Ç–µ –µ–¥—É –¥–æ–º–∞ —á–∞—â–µ",
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –ø–æ—Ä—Ü–∏–π"
      ]
    },
    "quit_smoking": {
      title: "–û—Ç–∫–∞–∑ –æ—Ç –∫—É—Ä–µ–Ω–∏—è",
      icon: "üö≠",
      recommendations: [
        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–∫–∞–∑–∞ –æ—Ç –∫—É—Ä–µ–Ω–∏—è",
        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
        "–ó–∞–º–µ–Ω–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∑–¥–æ—Ä–æ–≤—ã–º–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏",
        "–ò–∑–±–µ–≥–∞–π—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤ –ø–µ—Ä–≤—ã–µ –Ω–µ–¥–µ–ª–∏",
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
      ]
    },
    "manage_condition": {
      title: "–ö–æ–Ω—Ç—Ä–æ–ª—å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è",
      icon: "ü©∫",
      recommendations: [
        "–°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –≤—Ä–∞—á–∞",
        "–†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞",
        "–í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —Å–∏–º–ø—Ç–æ–º–æ–≤",
        "–ü–æ—Å–µ—â–∞–π—Ç–µ –ø–ª–∞–Ω–æ–≤—ã–µ –æ—Å–º–æ—Ç—Ä—ã",
        "–ò–∑—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
      ]
    },
    "increase_energy": {
      title: "–ü–æ–≤—ã—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏",
      icon: "‚ö°",
      recommendations: [
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏",
        "–î–µ–ª–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è",
        "–ü–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã",
        "–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è",
        "–ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –≤–∏—Ç–∞–º–∏–Ω D –∏ B12 –ø—Ä–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–µ"
      ]
    },
    "mental_health": {
      title: "–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
      icon: "üß†",
      recommendations: [
        "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏",
        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
        "–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–æ—Å—è—Ç —Ä–∞–¥–æ—Å—Ç—å",
        "–ò–∑—É—á–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏—è–º–∏"
      ]
    },
    "preventive_care": {
      title: "–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π",
      icon: "üõ°Ô∏è",
      recommendations: [
        "–ü—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –º–µ–¥–æ—Å–º–æ—Ç—Ä—ã",
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –¥–∞–≤–ª–µ–Ω–∏—è –∏ —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–∞",
        "–î–µ–ª–∞–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∏–≤–∏–≤–∫–∏",
        "–†–µ–≥—É–ª—è—Ä–Ω–æ —Å–¥–∞–≤–∞–π—Ç–µ –∞–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏",
        "–ü—Ä–æ–≤–æ–¥–∏—Ç–µ —Å–∞–º–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
      ]
    },
    "longevity": {
      title: "–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ",
      icon: "üåü",
      recommendations: [
        "–°–ª–µ–¥—É–π—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º —Å—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–æ–π –¥–∏–µ—Ç—ã",
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –∂–∏–∑–Ω—å",
        "–ò–∑—É—á–∞–π—Ç–µ –Ω–æ–≤–æ–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∑–≥–∞",
        "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–æ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ",
        "–†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é"
      ]
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserGoalRecommendations = () => {
    if (!hasProfile || !healthProfile?.profileData?.healthGoals) return [];
    
    const userGoals = healthProfile.profileData.healthGoals;
    return userGoals.map(goalValue => healthGoalRecommendations[goalValue]).filter(Boolean);
  };

  const goalRecommendations = getUserGoalRecommendations();

  const toggleGoalExpansion = (index: number) => {
    const newExpanded = new Set(expandedGoals);
    if (newExpanded.has(index)) {
      newExpanded.delete(index);
    } else {
      newExpanded.add(index);
    }
    setExpandedGoals(newExpanded);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50/30 dark:from-slate-950 dark:via-slate-900 dark:to-slate-800 overflow-x-hidden">
      <MobileNav />
      
      <main className="px-3 py-4 pb-24">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-6">
          <div className="bg-gradient-to-r from-medical-blue via-blue-500 to-trust-green relative overflow-hidden rounded-2xl">
            <div className="absolute inset-0 opacity-10">
              <div className="absolute inset-0 bg-[radial-gradient(circle_at_1px_1px,white_1px,transparent_0)] bg-[length:20px_20px]"></div>
            </div>
            <div className="relative p-5 text-white">
              <div className="flex items-center justify-between mb-4">
                <button 
                  onClick={() => navigate("/app/dashboard")}
                  className="p-2 bg-white/20 backdrop-blur-sm rounded-xl border border-white/30 shadow-lg transition-all hover:bg-white/30"
                >
                  <ArrowLeft className="w-5 h-5" />
                </button>
                <Badge className="bg-white/20 backdrop-blur-sm text-white border border-white/30 px-3 py-1">
                  <Brain className="w-3 h-3 mr-1.5" />
                  –ò–ò –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç
                </Badge>
              </div>
              
              <div className="flex items-center gap-3 mb-4">
                <div className="p-3 bg-white/20 backdrop-blur-sm rounded-2xl border border-white/30 shadow-lg">
                  <Stethoscope className="w-6 h-6" />
                </div>
                <div>
                  <h1 className="text-xl font-bold tracking-tight">
                    EVERLIV HEALTH –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç
                  </h1>
                  <p className="text-white/90 text-sm font-medium">
                    –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                  </p>
                </div>
              </div>
              
              {(hasProfile || hasAnalyses) && (
                <div className="bg-white/20 rounded-xl p-3 backdrop-blur-sm border border-white/30">
                  <div className="flex items-center gap-2 mb-2">
                    <Sparkles className="w-4 h-4 animate-pulse" />
                    <span className="text-sm font-medium">–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</span>
                  </div>
                  <div className="flex gap-2">
                    {hasProfile && (
                      <Badge className="bg-white/30 text-white border-white/20 text-xs">
                        <User className="w-3 h-3 mr-1" />
                        –ü—Ä–æ—Ñ–∏–ª—å –∑–¥–æ—Ä–æ–≤—å—è
                      </Badge>
                    )}
                    {hasAnalyses && (
                      <Badge className="bg-white/30 text-white border-white/20 text-xs">
                        <TestTube className="w-3 h-3 mr-1" />
                        –ê–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏
                      </Badge>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* –§–æ—Ä–º–∞ –≤–æ–ø—Ä–æ—Å–∞ */}
        <Card className="mb-6 p-4 border-0 shadow-lg bg-white/95 dark:bg-slate-800/95 backdrop-blur-sm">
          <div className="space-y-4">
            <div className="flex items-center gap-2 mb-3">
              <MessageCircle className="w-5 h-5 text-medical-blue" />
              <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
                –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É
              </h2>
            </div>
            
            <Textarea
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –º–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã –∏ –¥–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∑–¥–æ—Ä–æ–≤—å—è..."
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              className="min-h-[100px] resize-none"
              disabled={consultationMutation.isPending}
            />
            
            <div className="flex gap-2">
              <Button 
                onClick={handleSubmitQuestion}
                disabled={!question.trim() || consultationMutation.isPending}
                className="bg-gradient-to-r from-medical-blue to-trust-green hover:from-medical-blue/90 hover:to-trust-green/90 text-white border-0 shadow-lg flex-1"
              >
                {consultationMutation.isPending ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...
                  </>
                ) : (
                  <>
                    <Send className="w-4 h-4 mr-2" />
                    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
                  </>
                )}
              </Button>
            </div>
          </div>
        </Card>

        {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        {goalRecommendations.length > 0 && (
          <Card className="mb-6 p-5 border-0 shadow-lg bg-white/95 dark:bg-slate-800/95 backdrop-blur-sm">
            <div className="space-y-4">
              <div className="flex items-center gap-2 mb-4 flex-wrap">
                <Target className="w-5 h-5 text-medical-blue" />
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                  –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                </h3>
                <Badge className="bg-trust-green/10 text-trust-green border-trust-green/20 text-xs px-2 py-1 rounded-full whitespace-nowrap">
                  –≤–∞—à–∏ —Ü–µ–ª–∏
                </Badge>
              </div>
              
              <div className="grid gap-4">
                {goalRecommendations.map((goal, index) => (
                  <div key={index} className="bg-gradient-to-r from-slate-50 to-blue-50/50 dark:from-slate-700 dark:to-slate-600 rounded-xl p-4 border border-slate-200/50 dark:border-slate-600/50">
                    <div className="flex items-center gap-3 mb-3">
                      <span className="text-2xl">{goal.icon}</span>
                      <h4 className="font-semibold text-gray-900 dark:text-white">
                        {goal.title}
                      </h4>
                    </div>
                    
                    <div className="space-y-2">
                      {(expandedGoals.has(index) ? goal.recommendations : goal.recommendations.slice(0, 3)).map((rec, recIndex) => (
                        <div key={recIndex} className="flex items-start gap-2">
                          <div className="w-1.5 h-1.5 bg-trust-green rounded-full mt-2 flex-shrink-0" />
                          <span className="text-sm text-gray-700 dark:text-gray-300 leading-relaxed">
                            {rec}
                          </span>
                        </div>
                      ))}
                      {goal.recommendations.length > 3 && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => toggleGoalExpansion(index)}
                          className="text-xs text-trust-green hover:text-trust-green hover:bg-trust-green/10 p-1 h-auto mt-2"
                        >
                          {expandedGoals.has(index) 
                            ? `–°–∫—Ä—ã—Ç—å ${goal.recommendations.length - 3} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π`
                            : `+${goal.recommendations.length - 3} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π`
                          }
                        </Button>
                      )}
                    </div>
                  </div>
                ))}
              </div>
              
              <div className="bg-amber-50 dark:bg-amber-950/20 rounded-lg p-3 border border-amber-200 dark:border-amber-800/30">
                <p className="text-xs text-amber-700 dark:text-amber-300 flex items-center gap-2">
                  <Lightbulb className="w-3 h-3" />
                  –≠—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –≤–∞—à–∏—Ö —Ü–µ–ª—è—Ö –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∑–¥–æ—Ä–æ–≤—å—è. –û–±–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
                </p>
              </div>
            </div>
          </Card>
        )}

        {/* –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã */}
        {quickQuestions.length > 0 && consultationHistory.length === 0 && (
          <Card className="mb-6 p-4 border-0 shadow-lg bg-white/95 dark:bg-slate-800/95 backdrop-blur-sm">
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <Lightbulb className="w-5 h-5 text-energy-orange" />
                <h3 className="font-semibold text-gray-900 dark:text-white">
                  –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                </h3>
              </div>
              <div className="grid gap-2">
                {quickQuestions.map((q, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    onClick={() => setQuestion(q)}
                    className="text-left justify-start h-auto py-3 px-4 hover:bg-gray-50 dark:hover:bg-slate-700 whitespace-normal text-wrap"
                    disabled={consultationMutation.isPending}
                  >
                    <span className="text-xs leading-relaxed break-words">{q}</span>
                  </Button>
                ))}
              </div>
            </div>
          </Card>
        )}

        {/* –ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π */}
        {consultationHistory.length > 0 && (
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white flex items-center gap-2">
              <FileText className="w-5 h-5" />
              –ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
            </h3>
            
            {consultationHistory.map((consultation, index) => (
              <Card key={index} className="p-5 border-0 shadow-lg bg-white/95 dark:bg-slate-800/95 backdrop-blur-sm">
                <div className="space-y-4">
                  {/* –í–æ–ø—Ä–æ—Å */}
                  <div className="bg-gray-50 dark:bg-slate-700 rounded-lg p-4">
                    <div className="flex items-start gap-3">
                      <div className="w-8 h-8 bg-medical-blue rounded-lg flex items-center justify-center flex-shrink-0">
                        <User className="w-4 h-4 text-white" />
                      </div>
                      <div className="flex-1">
                        <p className="text-sm font-medium text-gray-900 dark:text-white">
                          –í–∞—à –≤–æ–ø—Ä–æ—Å:
                        </p>
                        <p className="text-sm text-gray-700 dark:text-gray-300 mt-1">
                          {consultation.question}
                        </p>
                      </div>
                    </div>
                  </div>

                  {/* –û—Ç–≤–µ—Ç */}
                  <div className="space-y-3">
                    <div className="flex items-center gap-2">
                      <div className="w-8 h-8 bg-trust-green rounded-lg flex items-center justify-center">
                        <Brain className="w-4 h-4 text-white" />
                      </div>
                      <span className="font-medium text-gray-900 dark:text-white">
                        –ò–ò –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç
                      </span>
                      <Badge className={`${getPriorityColor(consultation.response.priority)} border text-xs`}>
                        {getPriorityIcon(consultation.response.priority)}
                        <span className="ml-1 capitalize">{consultation.response.priority}</span>
                      </Badge>
                    </div>
                    
                    <div className="bg-green-50 dark:bg-green-950/20 rounded-lg p-4">
                      <p className="text-sm text-gray-700 dark:text-gray-300 leading-relaxed">
                        {consultation.response.analysis}
                      </p>
                    </div>

                    {consultation.response.recommendations.length > 0 && (
                      <div>
                        <h4 className="font-medium text-gray-900 dark:text-white mb-2 flex items-center gap-2">
                          <CheckCircle2 className="w-4 h-4 text-trust-green" />
                          –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
                        </h4>
                        <ul className="space-y-2">
                          {consultation.response.recommendations.map((rec, recIndex) => (
                            <li key={recIndex} className="flex items-start gap-2">
                              <div className="w-1.5 h-1.5 bg-trust-green rounded-full mt-2 flex-shrink-0" />
                              <span className="text-sm text-gray-700 dark:text-gray-300">{rec}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}

                    {consultation.response.followUp.length > 0 && (
                      <div>
                        <h4 className="font-medium text-gray-900 dark:text-white mb-2 flex items-center gap-2">
                          <TrendingUp className="w-4 h-4 text-energy-orange" />
                          –î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏:
                        </h4>
                        <ul className="space-y-2">
                          {consultation.response.followUp.map((step, stepIndex) => (
                            <li key={stepIndex} className="flex items-start gap-2">
                              <div className="w-1.5 h-1.5 bg-energy-orange rounded-full mt-2 flex-shrink-0" />
                              <span className="text-sm text-gray-700 dark:text-gray-300">{step}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}

                    <div className="bg-amber-50 dark:bg-amber-950/20 rounded-lg p-3">
                      <p className="text-xs text-amber-700 dark:text-amber-300">
                        ‚ö†Ô∏è {consultation.response.disclaimer}
                      </p>
                    </div>

                    <div className="text-xs text-gray-500 dark:text-gray-400">
                      {consultation.timestamp.toLocaleString('ru-RU')}
                    </div>
                  </div>
                </div>
              </Card>
            ))}
          </div>
        )}

        {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö */}
        {!hasProfile && !hasAnalyses && (
          <Card className="p-5 border-0 shadow-lg bg-amber-50 dark:bg-amber-950/20">
            <div className="flex items-start gap-3">
              <AlertCircle className="w-5 h-5 text-amber-600 dark:text-amber-400 flex-shrink-0 mt-0.5" />
              <div>
                <h3 className="font-medium text-amber-800 dark:text-amber-300 mb-1">
                  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
                </h3>
                <p className="text-sm text-amber-700 dark:text-amber-400">
                  –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∑–¥–æ—Ä–æ–≤—å—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏.
                </p>
                <div className="flex gap-2 mt-3">
                  <Button 
                    size="sm" 
                    variant="outline"
                    onClick={() => navigate("/app/health-profile")}
                    className="border-amber-300 text-amber-700 hover:bg-amber-100"
                  >
                    –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                  </Button>
                  <Button 
                    size="sm" 
                    variant="outline"
                    onClick={() => navigate("/app/blood-analysis")}
                    className="border-amber-300 text-amber-700 hover:bg-amber-100"
                  >
                    –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã
                  </Button>
                </div>
              </div>
            </div>
          </Card>
        )}
      </main>
      
      <BottomNav />
    </div>
  );
}