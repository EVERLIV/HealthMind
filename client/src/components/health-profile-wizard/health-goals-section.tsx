import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { Textarea } from "@/components/ui/textarea";
import { Card } from "@/components/ui/card";
import { Target, Trophy, Heart } from "lucide-react";
import type { HealthProfileData } from "./index";

interface HealthGoalsSectionProps {
  data: HealthProfileData;
  onUpdate: (data: Partial<HealthProfileData>) => void;
}

const healthGoalOptions = [
  { value: "weight_loss", label: "–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞", icon: "üéØ" },
  { value: "muscle_gain", label: "–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã", icon: "üí™" },
  { value: "improve_fitness", label: "–£–ª—É—á—à–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã", icon: "üèÉ" },
  { value: "reduce_stress", label: "–°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞", icon: "üßò" },
  { value: "better_sleep", label: "–£–ª—É—á—à–µ–Ω–∏–µ —Å–Ω–∞", icon: "üò¥" },
  { value: "healthy_eating", label: "–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", icon: "ü•ó" },
  { value: "quit_smoking", label: "–ë—Ä–æ—Å–∏—Ç—å –∫—É—Ä–∏—Ç—å", icon: "üö≠" },
  { value: "manage_condition", label: "–ö–æ–Ω—Ç—Ä–æ–ª—å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è", icon: "üíä" },
  { value: "increase_energy", label: "–ü–æ–≤—ã—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏", icon: "‚ö°" },
  { value: "mental_health", label: "–£–ª—É—á—à–µ–Ω–∏–µ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è", icon: "üß†" },
  { value: "preventive_care", label: "–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π", icon: "üõ°Ô∏è" },
  { value: "longevity", label: "–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ", icon: "üåü" },
];

export default function HealthGoalsSection({ data, onUpdate }: HealthGoalsSectionProps) {
  const handleGoalToggle = (goal: string, checked: boolean) => {
    const currentGoals = data.healthGoals || [];
    const newGoals = checked
      ? [...currentGoals, goal]
      : currentGoals.filter(g => g !== goal);
    onUpdate({ healthGoals: newGoals });
  };
  
  return (
    <div className="space-y-6">
      <div className="text-center mb-6">
        <div className="w-20 h-20 mx-auto mb-4 bg-gradient-to-br from-trust-green/20 to-emerald-500/20 rounded-full flex items-center justify-center">
          <Target className="w-10 h-10 text-trust-green" />
        </div>
        <p className="text-sm text-muted-foreground">
          –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å?
        </p>
      </div>
      
      {/* Health Goals Selection */}
      <div className="space-y-3">
        <Label className="flex items-center space-x-2">
          <Target className="w-4 h-4" />
          <span>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ —Ü–µ–ª–∏</span>
        </Label>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
          {healthGoalOptions.map((goal) => (
            <Card 
              key={goal.value} 
              className={`p-3 transition-colors cursor-pointer ${
                data.healthGoals?.includes(goal.value) 
                  ? "bg-light-blue border-medical-blue" 
                  : "hover:bg-accent"
              }`}
            >
              <div className="flex items-center space-x-3">
                <Checkbox
                  id={goal.value}
                  checked={data.healthGoals?.includes(goal.value) || false}
                  onCheckedChange={(checked) => handleGoalToggle(goal.value, checked as boolean)}
                />
                <Label htmlFor={goal.value} className="cursor-pointer font-normal flex-1 flex items-center space-x-2">
                  <span className="text-lg">{goal.icon}</span>
                  <span>{goal.label}</span>
                </Label>
              </div>
            </Card>
          ))}
        </div>
      </div>
      
      {/* Primary Goal */}
      <div className="space-y-3">
        <Label htmlFor="primary-goal" className="flex items-center space-x-2">
          <Trophy className="w-4 h-4" />
          <span>–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å (–æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ)</span>
        </Label>
        <Textarea
          id="primary-goal"
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –•–æ—á—É –ø–æ—Ö—É–¥–µ—Ç—å –Ω–∞ 10 –∫–≥ –∑–∞ 3 –º–µ—Å—è—Ü–∞, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –∏ —Å–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å—É—Å—Ç–∞–≤—ã..."
          value={data.primaryGoal || ""}
          onChange={(e) => onUpdate({ primaryGoal: e.target.value })}
          rows={4}
          className="resize-none"
          data-testid="textarea-primary-goal"
        />
      </div>
      
      {/* Motivation Card */}
      <Card className="p-4 bg-gradient-to-r from-medical-blue/10 to-trust-green/10 border-0">
        <div className="flex items-start space-x-3">
          <Heart className="w-5 h-5 text-medical-blue mt-0.5" />
          <div>
            <p className="font-medium text-sm mb-1">–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!</p>
            <p className="text-xs text-muted-foreground">
              –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ç–∫–∏—Ö —Ü–µ–ª–µ–π - —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é. 
              –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ 
              –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è.
            </p>
          </div>
        </div>
      </Card>
      
      {/* Selected Goals Summary */}
      {data.healthGoals && data.healthGoals.length > 0 && (
        <Card className="p-4 bg-light-blue border-0">
          <p className="text-sm font-medium mb-2">–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏ ({data.healthGoals.length}):</p>
          <div className="flex flex-wrap gap-2">
            {data.healthGoals.map(goalValue => {
              const goal = healthGoalOptions.find(g => g.value === goalValue);
              return goal ? (
                <span 
                  key={goalValue} 
                  className="inline-flex items-center space-x-1 px-2 py-1 bg-white dark:bg-card rounded-md text-xs"
                >
                  <span>{goal.icon}</span>
                  <span>{goal.label}</span>
                </span>
              ) : null;
            })}
          </div>
        </Card>
      )}
    </div>
  );
}