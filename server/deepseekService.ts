import OpenAI from 'openai';

interface HealthProfile {
  age: number;
  gender: string;
  height: number;
  weight: number;
  bmi: number;
  activityLevel: string;
  goals: string[];
  chronicConditions: string[];
  allergies: string[];
  medications: string[];
  supplements: string[];
}

interface BloodMarker {
  name: string;
  value: string;
  unit?: string;
  normalRange?: string;
  status: 'normal' | 'low' | 'high' | 'critical';
  education?: string;
  recommendation?: string;
}

interface RecommendationSection {
  title: string;
  items: string[];
}

interface BiomarkerRecommendation {
  currentValue: string;
  targetValue: string;
  howToImprove: string[];
  supplements: string[];
  retestFrequency: string;
}

interface HealthRecommendations {
  disclaimer: string;
  summary: string;
  priorityAreas: string[];
  biomarkerRecommendations?: Record<string, BiomarkerRecommendation>;
  nutrition: RecommendationSection;
  physicalActivity: RecommendationSection;
  lifestyle: RecommendationSection;
  supplements: RecommendationSection;
  actionPlan: string[];
  nextSteps: string[];
}

export class DeepSeekService {
  private client: OpenAI;

  constructor(apiKey: string) {
    this.client = new OpenAI({
      apiKey: apiKey,
      baseURL: 'https://api.deepseek.com/v1'
    });
  }

  async generateHealthRecommendations(
    profile: HealthProfile | null,
    bloodMarkers: BloodMarker[]
  ): Promise<HealthRecommendations> {
    try {
      const systemPrompt = `## 1. –†–æ–ª—å –∏ —Ü–µ–ª—å

–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –¶–ï–õ–ï–ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢—ã –Ω–µ —è–≤–ª—è–µ—à—å—Å—è –≤—Ä–∞—á–æ–º, –∏ —Ç–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.

## 2. –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã

1. **–£—á–∏—Ç—ã–≤–∞–π —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** –í–°–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–º–æ–≥–∞—Ç—å –¥–æ—Å—Ç–∏—á—å –∑–∞—è–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π (–ø–æ—Ö—É–¥–µ–Ω–∏–µ, –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã, –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å, –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–¥—Ü–∞ –∏ —Ç.–¥.)
2. **–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –±–∏–æ–º–∞—Ä–∫–µ—Ä–∞–º:** –î–ª—è –ö–ê–ñ–î–û–ì–û –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–≥–æ –±–∏–æ–º–∞—Ä–∫–µ—Ä–∞ –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —É–ª—É—á—à–µ–Ω–∏—è –∏ —Ç–æ—á–Ω—ã–µ –¥–æ–∑–∏—Ä–æ–≤–∫–∏ –¥–æ–±–∞–≤–æ–∫
3. **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö ‚Äî –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É
4. **–ù–∞—É—á–Ω–∞—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å:** –í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö
5. **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:** –£—á–∏—Ç—ã–≤–∞–π –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, –∞–ª–ª–µ—Ä–≥–∏–∏, –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞

## 3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "disclaimer": "‚ùó –í–∞–∂–Ω–æ: –Ø ‚Äî –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –≠—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–∏–µ–º–∞ –¥–æ–±–∞–≤–æ–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏.",
  "summary": "–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ —Å —É—á–µ—Ç–æ–º –¶–ï–õ–ï–ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π",
  "priorityAreas": ["3-4 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –¶–ï–õ–ï–ô –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π"],
  "biomarkerRecommendations": {
    "–ù–∞–∑–≤–∞–Ω–∏–µ_–±–∏–æ–º–∞—Ä–∫–µ—Ä–∞": {
      "currentValue": "—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏",
      "targetValue": "—Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
      "howToImprove": ["—Å–ø–æ—Å–æ–± 1", "—Å–ø–æ—Å–æ–± 2", "—Å–ø–æ—Å–æ–± 3"],
      "supplements": ["–í–∏—Ç–∞–º–∏–Ω D3 2000 –ú–ï —É—Ç—Ä–æ–º", "–û–º–µ–≥–∞-3 1000–º–≥ 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å"],
      "retestFrequency": "—á–µ—Ä–µ–∑ 2-3 –º–µ—Å—è—Ü–∞"
    }
  },
  "nutrition": {
    "title": "–ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π",
    "items": ["6-8 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —É—á–µ—Ç–æ–º –¶–ï–õ–ï–ô –∏ –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤"]
  },
  "physicalActivity": {
    "title": "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
    "items": ["5-6 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¶–ï–õ–ï–ô"]
  },
  "lifestyle": {
    "title": "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
    "items": ["4-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ä–µ–∂–∏–º—É –∏ –ø—Ä–∏–≤—ã—á–∫–∞–º"]
  },
  "supplements": {
    "title": "–í–∏—Ç–∞–º–∏–Ω—ã –∏ –¥–æ–±–∞–≤–∫–∏",
    "items": ["5-7 –¥–æ–±–∞–≤–æ–∫ —Å –¢–û–ß–ù–´–ú–ò –¥–æ–∑–∏—Ä–æ–≤–∫–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–∏–µ–º–∞"]
  },
  "actionPlan": ["5-6 —à–∞–≥–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¶–ï–õ–ï–ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"],
  "nextSteps": ["4-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ä–æ–∫–æ–≤"]
}`;

      const userPrompt = this.buildUserPrompt(profile, bloodMarkers);

      const response = await this.client.chat.completions.create({
        model: "deepseek-chat",
        messages: [
          {
            role: "system",
            content: systemPrompt
          },
          {
            role: "user",
            content: userPrompt
          }
        ],
        max_tokens: 3000,
        temperature: 0.3,
      });

      const content = response.choices[0].message.content;
      if (!content) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek");
      }

      try {
        const result = JSON.parse(content) as HealthRecommendations;
        return this.validateAndEnrichRecommendations(result);
      } catch (parseError) {
        console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç DeepSeek:", content);
        return this.getDefaultRecommendations();
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å DeepSeek:", error);
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏");
    }
  }

  private buildUserPrompt(profile: HealthProfile | null, bloodMarkers: BloodMarker[]): string {
    let prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –µ–≥–æ –¶–ï–õ–ï–ô:\n\n";

    if (profile) {
      prompt += "**–ü–†–û–§–ò–õ–¨ –ó–î–û–†–û–í–¨–Ø:**\n";
      prompt += `- –í–æ–∑—Ä–∞—Å—Ç: ${profile.age} –ª–µ—Ç\n`;
      prompt += `- –ü–æ–ª: ${profile.gender}\n`;
      prompt += `- –†–æ—Å—Ç: ${profile.height} —Å–º\n`;
      prompt += `- –í–µ—Å: ${profile.weight} –∫–≥\n`;
      prompt += `- –ò–ú–¢: ${profile.bmi.toFixed(1)}\n`;
      prompt += `- –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${profile.activityLevel}\n`;
      
      if (profile.goals && profile.goals.length > 0) {
        prompt += `\nüéØ **–¶–ï–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ß–¢–ò!):**\n`;
        profile.goals.forEach(goal => {
          prompt += `- ${goal}\n`;
        });
      }
      
      if (profile.chronicConditions && profile.chronicConditions.length > 0) {
        prompt += `\n‚ö†Ô∏è –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: ${profile.chronicConditions.join(', ')}\n`;
      }
      
      if (profile.allergies && profile.allergies.length > 0) {
        prompt += `üö´ –ê–ª–ª–µ—Ä–≥–∏–∏ (–ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É–π —ç—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã!): ${profile.allergies.join(', ')}\n`;
      }
      
      if (profile.medications && profile.medications.length > 0) {
        prompt += `üíä –ü—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: ${profile.medications.join(', ')}\n`;
      }
      
      if (profile.supplements && profile.supplements.length > 0) {
        prompt += `üåø –£–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–æ–±–∞–≤–∫–∏: ${profile.supplements.join(', ')}\n`;
      }
      
      prompt += "\n";
    }

    if (bloodMarkers && bloodMarkers.length > 0) {
      prompt += "**–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–û–í –ö–†–û–í–ò:**\n";
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
      const criticalMarkers = bloodMarkers.filter(m => m.status === 'critical');
      const abnormalMarkers = bloodMarkers.filter(m => m.status === 'high' || m.status === 'low');
      const normalMarkers = bloodMarkers.filter(m => m.status === 'normal');

      if (criticalMarkers.length > 0) {
        prompt += "\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–¢–ö–õ–û–ù–ï–ù–ò–Ø (—Ç—Ä–µ–±—É—é—Ç —Å—Ä–æ—á–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è!):\n";
        criticalMarkers.forEach(marker => {
          prompt += `- ${marker.name}: ${marker.value} ${marker.unit || ''} (–Ω–æ—Ä–º–∞: ${marker.normalRange || '–Ω/–¥'}) - –ö–†–ò–¢–ò–ß–ù–û!\n`;
        });
      }

      if (abnormalMarkers.length > 0) {
        prompt += "\n‚ùó –û–¢–ö–õ–û–ù–ï–ù–ò–Ø –û–¢ –ù–û–†–ú–´ (—Å–æ–∑–¥–∞–π biomarkerRecommendations –¥–ª—è –ö–ê–ñ–î–û–ì–û!):\n";
        abnormalMarkers.forEach(marker => {
          const status = marker.status === 'high' ? '–ü–û–í–´–®–ï–ù' : '–ü–û–ù–ò–ñ–ï–ù';
          prompt += `- ${marker.name}: ${marker.value} ${marker.unit || ''} (–Ω–æ—Ä–º–∞: ${marker.normalRange || '–Ω/–¥'}) - ${status}\n`;
        });
      }

      if (normalMarkers.length > 0) {
        prompt += "\n‚úÖ –í –ü–†–ï–î–ï–õ–ê–• –ù–û–†–ú–´:\n";
        normalMarkers.forEach(marker => {
          prompt += `- ${marker.name}: ${marker.value} ${marker.unit || ''}\n`;
        });
      }
    }

    prompt += "\n\n**–í–ê–ñ–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:**\n";
    prompt += "1. –í–°–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–º–æ–≥–∞—Ç—å –¥–æ—Å—Ç–∏—á—å –¶–ï–õ–ï–ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
    prompt += "2. –î–ª—è –ö–ê–ñ–î–û–ì–û –±–∏–æ–º–∞—Ä–∫–µ—Ä–∞ –≤–Ω–µ –Ω–æ—Ä–º—ã —Å–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ biomarkerRecommendations\n";
    prompt += "3. –£–∫–∞–∑—ã–≤–∞–π –¢–û–ß–ù–´–ï –¥–æ–∑–∏—Ä–æ–≤–∫–∏ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ (–º–≥, –ú–ï, –º–∫–≥) –∏ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞\n";
    prompt += "4. –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö –∏ –∞–ª–ª–µ—Ä–≥–∏—è—Ö\n";
    prompt += "5. –ü–ò–¢–ê–ù–ò–ï: –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —Ä–∞–∑–º–µ—Ä—ã –ø–æ—Ä—Ü–∏–π –∏ —á–∞—Å—Ç–æ—Ç—É –ø—Ä–∏–µ–º–∞\n";
    prompt += "6. –ê–ö–¢–ò–í–ù–û–°–¢–¨: –£–∫–∞–∑—ã–≤–∞–π —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏ —á–∞—Å—Ç–æ—Ç—É\n";
    prompt += "7. –ü–†–ò–û–†–ò–¢–ï–¢–´: –û—Å–Ω–æ–≤—ã–≤–∞–π –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö –≤ –∞–Ω–∞–ª–∏–∑–∞—Ö –∏ —Ü–µ–ª—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
    prompt += "8. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞!\n";
    prompt += "5. –ï—Å–ª–∏ —Ü–µ–ª—å - –ø–æ—Ö—É–¥–µ–Ω–∏–µ, –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Å–ø–æ—Å–æ–±—Å—Ç–≤–æ–≤–∞—Ç—å —Å–Ω–∏–∂–µ–Ω–∏—é –≤–µ—Å–∞\n";
    prompt += "6. –ï—Å–ª–∏ —Ü–µ–ª—å - –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–º–æ–≥–∞—Ç—å –Ω–∞–±–æ—Ä—É –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã\n";

    return prompt;
  }

  private validateAndEnrichRecommendations(result: HealthRecommendations): HealthRecommendations {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (!result.disclaimer) {
      result.disclaimer = "‚ùó –í–∞–∂–Ω–æ: –Ø ‚Äî –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é. –ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –¥–∏–∞–≥–Ω–æ–∑–æ–º –∏–ª–∏ –∑–∞–º–µ–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –≤—Ä–∞—á–æ–º. –ü–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ª—é–±—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π, –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.";
    }

    if (!result.summary) {
      result.summary = "–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è.";
    }

    if (!result.priorityAreas || result.priorityAreas.length === 0) {
      result.priorityAreas = ["–û–±—â–µ–µ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è", "–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π"];
    }

    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ —Å–µ–∫—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (!result.nutrition || !result.nutrition.items) {
      result.nutrition = {
        title: "–ü–∏—Ç–∞–Ω–∏–µ",
        items: ["–°–±–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ —Ä–∞—Ü–∏–æ–Ω", "–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤"]
      };
    }

    if (!result.physicalActivity || !result.physicalActivity.items) {
      result.physicalActivity = {
        title: "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        items: ["–ú–∏–Ω–∏–º—É–º 30 –º–∏–Ω—É—Ç —É–º–µ—Ä–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å", "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ"]
      };
    }

    if (!result.lifestyle || !result.lifestyle.items) {
      result.lifestyle = {
        title: "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
        items: ["–°–æ–±–ª—é–¥–∞–π—Ç–µ —Ä–µ–∂–∏–º —Å–Ω–∞ (7-9 —á–∞—Å–æ–≤)", "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–æ–º"]
      };
    }

    if (!result.supplements || !result.supplements.items) {
      result.supplements = {
        title: "–í–∏—Ç–∞–º–∏–Ω—ã –∏ –¥–æ–±–∞–≤–∫–∏",
        items: ["–ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º –ø–µ—Ä–µ–¥ –ø—Ä–∏–µ–º–æ–º –ª—é–±—ã—Ö –¥–æ–±–∞–≤–æ–∫"]
      };
    }

    if (!result.actionPlan || result.actionPlan.length === 0) {
      result.actionPlan = ["–ù–∞—á–Ω–∏—Ç–µ —Å –Ω–µ–±–æ–ª—å—à–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–∏—Ç–∞–Ω–∏–∏", "–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"];
    }

    if (!result.nextSteps || result.nextSteps.length === 0) {
      result.nextSteps = ["–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è", "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"];
    }

    return result;
  }

  private getDefaultRecommendations(): HealthRecommendations {
    return {
      disclaimer: "‚ùó –í–∞–∂–Ω–æ: –Ø ‚Äî –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é. –ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –¥–∏–∞–≥–Ω–æ–∑–æ–º –∏–ª–∏ –∑–∞–º–µ–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –≤—Ä–∞—á–æ–º. –ü–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ª—é–±—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.",
      summary: "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∑–¥–æ—Ä–æ–≤—å—è.",
      priorityAreas: [
        "–û–±—â–µ–µ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è",
        "–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π",
        "–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏"
      ],
      nutrition: {
        title: "–ü–∏—Ç–∞–Ω–∏–µ",
        items: [
          "–°–±–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ —Ä–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è",
          "–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤",
          "–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ –∏ —Å–æ–ª–∏",
          "–ü–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã (30 –º–ª –Ω–∞ –∫–≥ –≤–µ—Å–∞)"
        ]
      },
      physicalActivity: {
        title: "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        items: [
          "–ú–∏–Ω–∏–º—É–º 150 –º–∏–Ω—É—Ç —É–º–µ—Ä–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–¥–µ–ª—é",
          "–î–æ–±–∞–≤—å—Ç–µ —Å–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é",
          "–î–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –∫–∞–∂–¥—ã–π —á–∞—Å –ø—Ä–∏ —Å–∏–¥—è—á–µ–π —Ä–∞–±–æ—Ç–µ",
          "–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É"
        ]
      },
      lifestyle: {
        title: "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
        items: [
          "–°–æ–±–ª—é–¥–∞–π—Ç–µ —Ä–µ–∂–∏–º —Å–Ω–∞ (7-9 —á–∞—Å–æ–≤ –≤ —Å—É—Ç–∫–∏)",
          "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–æ–º —á–µ—Ä–µ–∑ –º–µ–¥–∏—Ç–∞—Ü–∏—é –∏–ª–∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏",
          "–û—Ç–∫–∞–∂–∏—Ç–µ—Å—å –æ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫",
          "–ü—Ä–æ–≤–æ–¥–∏—Ç–µ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ"
        ]
      },
      supplements: {
        title: "–í–∏—Ç–∞–º–∏–Ω—ã –∏ –¥–æ–±–∞–≤–∫–∏",
        items: [
          "–°–¥–∞–π—Ç–µ –∞–Ω–∞–ª–∏–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã",
          "–ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º –ø–µ—Ä–µ–¥ –ø—Ä–∏–µ–º–æ–º –ª—é–±—ã—Ö –¥–æ–±–∞–≤–æ–∫",
          "–ù–µ –ø—Ä–µ–≤—ã—à–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–æ–∑–∏—Ä–æ–≤–∫–∏",
          "–û—Ç–¥–∞–≤–∞–π—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—é –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏–∑ –ø–∏—â–∏"
        ]
      },
      actionPlan: [
        "–®–∞–≥ 1: –ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
        "–®–∞–≥ 2: –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∑–¥–æ—Ä–æ–≤—å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
        "–®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤",
        "–®–∞–≥ 4: –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏",
        "–®–∞–≥ 5: –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø–ª–∞–Ω"
      ],
      nextSteps: [
        "–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ —Ç–µ—Ä–∞–ø–µ–≤—Ç—É",
        "–°–¥–∞–π—Ç–µ –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –∏ –±–∏–æ—Ö–∏–º–∏—é",
        "–ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è",
        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑—ã —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –¥–∏–Ω–∞–º–∏–∫–∏"
      ]
    };
  }
}

// Legacy DeepSeekAnalysisService for blood test analysis
export class DeepSeekAnalysisService extends DeepSeekService {
  constructor(apiKey: string) {
    super(apiKey);
  }
  
  async analyzeBloodTestText(text: string): Promise<any> {
    // Legacy method for backward compatibility
    const profile = null;
    const bloodMarkers: any[] = [];
    const recommendations = await this.generateHealthRecommendations(profile, bloodMarkers);
    return {
      markers: [],
      supplements: [],
      generalRecommendation: recommendations.summary,
      riskFactors: [],
      followUpTests: recommendations.nextSteps,
      urgencyLevel: "low",
      nextCheckup: "–ß–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞"
    };
  }
}

export default DeepSeekService;